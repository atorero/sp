# https://www.playframework.com/documentation/latest/ConfigFile

## Akka https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
akka {
  # Put the following in your conf/logback.xml file:
  # <logger name="akka.actor" level="INFO" />
  # And then uncomment this line to debug the configuration.
  #log-config-on-start = true
}

## Internationalisation https://www.playframework.com/documentation/latest/ScalaI18N
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = [ "en" ]
  # Whether the language cookie should be secure or not
  #langCookieSecure = true
  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
play.http {
  ## Router https://www.playframework.com/documentation/latest/ScalaRouting
  #router = my.application.Router

  ## Action Creator https://www.playframework.com/documentation/latest/ScalaActionCreator
  #actionCreator = null

  ## ErrorHandler https://www.playframework.com/documentation/latest/ScalaRouting
  # If null, will attempt to load a class called ErrorHandler in the root package,
  #errorHandler = null

  ## Session & Flash https://www.playframework.com/documentation/latest/ScalaSessionFlash
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true
    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}

## Netty Provider https://www.playframework.com/documentation/latest/SettingsNetty
play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport for higher performance with less garbage.
  #transport = "native"
}

## WS (HTTP Client) https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL https://www.playframework.com/documentation/latest/WsSSL
  ssl {
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

## Cache# https://www.playframework.com/documentation/latest/ScalaCache
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
# libraryDependencies += cache
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Filter Configuration https://www.playframework.com/documentation/latest/Filters
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.
play.filters {
  # Enabled filters are run automatically against Play.
  # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
  enabled += filters.ExampleFilter

  #disabled += filters.ExampleFilters

  ## CORS filter configuration https://www.playframework.com/documentation/latest/CorsFilter
  # CORS is a protocol that allows web applications to make requests from the browser across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration https://www.playframework.com/documentation/latest/SecurityHeaders
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    contentSecurityPolicy = "" #"default-src 'self'; script-src 'self' 'unsafe-inline' https://www.google.com https://www.gstatic.com"
  }

  ## Allowed hosts filter configuration https://www.playframework.com/documentation/latest/AllowedHostsFilter
  hosts {
    allowed = [".scienceprovider.com", "localhost:9000"]
  }
}

h2file = {
  url = "jdbc:h2:file:../data/clients"
  driver = org.h2.Driver
}

## Modules https://www.playframework.com/documentation/latest/Modules
# Control which modules are loaded when Play starts.
play.modules {
  #enabled += my.application.Module
  #disabled += ""
}

## IDE
# https://www.playframework.com/documentation/latest/IDE
# ~~~~~
# Depending on your IDE, you can add a hyperlink for errors that will jump you
# directly to the code location in the IDE in dev mode. The following line makes
# use of the IntelliJ IDEA REST interface:
#play.editor="http://localhost:63342/api/file/?file=%s&line=%s"
